/*
 * The contents of this file are subject to the terms of the Common Development and
 * Distribution License (the License). You may not use this file except in compliance with the
 * License.
 *
 * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
 * specific language governing permission and limitations under the License.
 *
 * When distributing Covered Software, include this CDDL Header Notice in each file and include
 * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
 * Header, with the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions copyright [year] [name of copyright owner]".
 *
 * Copyright 2016 ForgeRock AS.
 */

package com.forgerock.authenticator.mechanisms;

import com.forgerock.authenticator.identity.Identity;
import com.forgerock.authenticator.storage.NotStoredException;

import java.util.Map;

/**
 * A mechanism used for authentication.
 * Encapsulates the related settings, as well as an owning Identity.
 */
public abstract class Mechanism {
    private long rowId = -1;

    /**
     * Gets the version number for this mechanism.
     * @return The Mechanism version number.
     */
    public abstract int getVersion();

    /**
     * Gets the id of this Mechanism used for storage. This value is unique to each Mechanism instance.
     * Return -1 if the id is not set.
     * @return The unique identifier for this Mechanism.
     */
    public long getRowId() throws NotStoredException {
        if (rowId == -1) {
            throw new NotStoredException("The mechanism has not yet been stored.");
        }
        return rowId;
    }

    /**
     * Sets the id of this Mechanism. Should only be used by the storage method.
     * @param rowId The unique identifier for this Mechanism, generated by the storage Mechanism.
     */
    public void setRowId(long rowId) {
        this.rowId = rowId;
    }

    /**
     * Returns the Mechanism's properties as a map of properties. The factory should be able to use
     * this map to recreate the Mechanism.
     * @return The Mechanism's properties.
     */
    public abstract Map<String, String> asMap();

    /**
     * Gets the MechanismInfo which describes this Mechanism.
     * @return The related MechanismInfo.
     */
    public abstract MechanismInfo getInfo();

    /**
     * Returns the identity which owns this Mechanism.
     * @return The owning identity.
     */
    public abstract Identity getOwner();
}
