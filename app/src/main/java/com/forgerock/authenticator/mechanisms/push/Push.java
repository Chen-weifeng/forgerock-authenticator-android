/*
 * The contents of this file are subject to the terms of the Common Development and
 * Distribution License (the License). You may not use this file except in compliance with the
 * License.
 *
 * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
 * specific language governing permission and limitations under the License.
 *
 * When distributing Covered Software, include this CDDL Header Notice in each file and include
 * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
 * Header, with the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions copyright [year] [name of copyright owner]".
 *
 * Copyright 2016 ForgeRock AS.
 */

package com.forgerock.authenticator.mechanisms.push;

import com.forgerock.authenticator.identity.Identity;
import com.forgerock.authenticator.mechanisms.base.Mechanism;
import com.forgerock.authenticator.mechanisms.MechanismCreationException;
import com.forgerock.authenticator.mechanisms.base.MechanismInfo;

import org.forgerock.util.encode.Base64;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

/**
 * Represents an instance of a Push authentication mechanism. Associated with an owner.
 *
 */
public class Push extends Mechanism {
    private static final int VERSION = 1;
    private static final PushInfo pushInfo = new PushInfo();
    private String endpoint;
    private String secret;

    private Push(Identity owner, long id, String mechanismUID, String secret, String endpoint) {
        super(owner, id, mechanismUID);
        this.endpoint = endpoint;
        this.secret = secret;
    }

    /**
     * Returns a builder for creating a Token.
     * @return The Push builder.
     */
    public static PushBuilder builder() {
        return new PushBuilder();
    }

    @Override
    public int getVersion() {
        return VERSION;
    }

    /**
     * Get the endpoint that is used by this Push mechanism.
     * @return The endpoint to return messages to.
     */
    public String getEndpoint() {
        return endpoint;
    }

    /**
     * Get the secret used for signing messages.
     * @return The base 64 encoded secret.
     */
    public String getSecret() {
        return secret;
    }

    @Override
    public Map<String, String> asMap() {
        Map<String, String> result = new HashMap<>();
        result.put(PushAuthMapper.AUTH_ENDPOINT, endpoint);
        result.put(PushAuthMapper.SHARED_SECRET, secret);
        return result;
    }

    @Override
    public MechanismInfo getInfo() {
        return pushInfo;
    }

    /**
     * Builder class responsible for building a Push mechanism.
     */
    public static class PushBuilder extends PartialMechanismBuilder<PushBuilder> {
        private String endpoint;
        private String secret;

        /**
         * Set the endpoint that will be used by this Push mechanism
         * @param endpoint The endpoint to return messages to.
         * @return This builder.
         */
        public PushBuilder setAuthEndpoint(String endpoint) {
            this.endpoint = endpoint;
            return this;
        }

        /**
         * Set the secret that this mechanism shares with the server. Encoded in Base64.
         * @param secret The shared secret.
         * @return This builder.
         */
        public PushBuilder setBase64Secret(String secret) {
            this.secret = secret;
            return this;
        }

        /**
         * Sets all of the options for the Push mechanism being built. Takes a Map that was
         * generated by an existing Push mechanism.
         * @param options The map of options that was generated.
         * @return The current builder.
         * @throws MechanismCreationException If any of the options were invalid.
         */
        public PushBuilder setOptions(Map<String, String> options) {
            endpoint = options.get(PushAuthMapper.AUTH_ENDPOINT);
            secret = options.get(PushAuthMapper.SHARED_SECRET);
            return this;
        }

        @Override
        protected PushBuilder getThis() {
            return this;
        }

        /**
         * Produce the described Mechanism.
         * @return The built Token.
         * @throws MechanismCreationException If an owner was not provided.
         */
        protected Push buildImpl(Identity owner) throws MechanismCreationException {
            return new Push(owner, id, mechanismUID, secret, endpoint);
        }

    }
}
