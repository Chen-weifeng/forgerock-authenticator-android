/*
 * The contents of this file are subject to the terms of the Common Development and
 * Distribution License (the License). You may not use this file except in compliance with the
 * License.
 *
 * You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
 * specific language governing permission and limitations under the License.
 *
 * When distributing Covered Software, include this CDDL Header Notice in each file and include
 * the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
 * Header, with the fields enclosed by brackets [] replaced by your own identifying
 * information: "Portions copyright [year] [name of copyright owner]".
 *
 * Copyright 2016 ForgeRock AS.
 */

package com.forgerock.authenticator.mechanisms.push;

import com.forgerock.authenticator.identity.Identity;
import com.forgerock.authenticator.mechanisms.Mechanism;
import com.forgerock.authenticator.mechanisms.MechanismCreationException;
import com.forgerock.authenticator.mechanisms.MechanismInfo;

import java.util.HashMap;
import java.util.Map;

/**
 * Represents an instance of a Push authentication mechanism. Associated with an owner.
 *
 */
public class Push extends Mechanism {
    private static final int VERSION = 1;
    private static final PushInfo pushInfo = new PushInfo();

    private final Identity owner;

    private Push(Identity owner) {
        this.owner = owner;
    }

    /**
     * Returns a builder for creating a Token.
     * @return The Push builder.
     */
    public static Builder builder() {
        return new Builder();
    }

    @Override
    public int getVersion() {
        return VERSION;
    }

    @Override
    public Map<String, String> asMap() {
        return new HashMap<>();
    }

    @Override
    public MechanismInfo getInfo() {
        return pushInfo;
    }

    @Override
    public Identity getOwner() {
        return owner;
    }

    /**
     * Builder class responsible for building a Push mechanism.
     */
    public static class Builder {
        private Identity owner;

        /**
         * Sets the owner of this mechanism. This MUST be called.
         * @param identity The Identity that owns the Push mechanism.
         * @return This builder.
         */
        public Builder setOwner(Identity identity) {
            owner = identity;
            return this;
        }

        /**
         * Sets all of the options for the Push mechanism being built. Takes a Map that was
         * generated by an existing Push mechanism.
         * @param options The map of options that was generated.
         * @return The current builder.
         * @throws MechanismCreationException If any of the options were invalid.
         */
        public Builder setOptions(Map<String, String> options) {
            // No options to set currently.
            return this;
        }

        /**
         * Produce the described Mechanism.
         * @return The built Token.
         * @throws MechanismCreationException If an owner was not provided.
         */
        public Push build() throws MechanismCreationException {
            if (owner == null) {
                throw new MechanismCreationException("Built mechanism must have an owner.");
            }
            return new Push(owner);
        }

    }
}
